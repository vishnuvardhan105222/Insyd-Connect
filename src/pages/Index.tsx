// React imports for state management and lifecycle
import { useState, useEffect } from 'react';
// UI component imports from our design system
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
// Lucide React icons for consistent iconography
import { Bell, Users, MessageSquare, Heart, UserPlus, Share2, Sparkles } from 'lucide-react';

// Mock notification data - simulates backend API response
// In production, this would come from your backend notification service
const mockNotifications = [
  {
    notificationId: '1', // Unique identifier for each notification
    type: 'FOLLOW', // Type of action that triggered the notification
    content: 'priya_designer started following you', // Human-readable notification message
    status: 'unread', // Read/unread status for UI highlighting
    timeAgo: '1h ago', // Time display for user context
    sourceUserId: 'user2' // User who performed the action
  },
  {
    notificationId: '2', 
    type: 'LIKE',
    content: 'rohit_urban liked your post',
    status: 'unread',
    timeAgo: '30m ago',
    sourceUserId: 'user3'
  },
  {
    notificationId: '3',
    type: 'COMMENT',
    content: 'maya_sustainable commented: "Love the sustainable approach!"',
    status: 'read', // This notification has been read
    timeAgo: '15m ago',
    sourceUserId: 'user4'
  }
];

const Index = () => {
  // State management for notifications and unread count
  const [notifications, setNotifications] = useState(mockNotifications);
  const [unreadCount, setUnreadCount] = useState(2);

  // Audio feedback system for interactive actions
  // Creates different sound frequencies for each action type
  const playSound = (type: string) => {
    // Create Web Audio API context for sound generation
    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    // Connect audio nodes for sound output
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    // Map different actions to unique sound frequencies
    // This provides audio feedback to distinguish between action types
    const frequencies = {
      LIKE: 800,    // High pitch for likes (positive feeling)
      FOLLOW: 600,  // Medium-high for follows
      COMMENT: 700, // Medium-high for comments
      SHARE: 500    // Lower pitch for shares
    };
    
    // Set the frequency based on action type
    oscillator.frequency.setValueAtTime(frequencies[type as keyof typeof frequencies] || 650, audioContext.currentTime);
    oscillator.type = 'sine'; // Smooth sine wave for pleasant sound
    
    // Create a quick fade-in and fade-out envelope for the sound
    gainNode.gain.setValueAtTime(0, audioContext.currentTime);
    gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.01);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
    
    // Play the sound for 0.3 seconds
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + 0.3);
  };

  // Function to return appropriate icon for each notification type
  // This creates visual consistency across the notification system
  const getIcon = (type: string) => {
    switch (type) {
      case 'FOLLOW': return <UserPlus className="w-4 h-4" />;
      case 'LIKE': return <Heart className="w-4 h-4" />;
      case 'COMMENT': return <MessageSquare className="w-4 h-4" />;
      case 'SHARE': return <Share2 className="w-4 h-4" />;
      default: return <Bell className="w-4 h-4" />; // Fallback icon
    }
  };

  // Event trigger function - simulates user actions that create notifications
  // In production, this would send API calls to your backend
  const triggerEvent = (type: string) => {
    // Play audio feedback first for immediate user response
    playSound(type);
    
    // Create a new notification object
    // In production, this notification would be generated by your backend
    const newNotification = {
      notificationId: Date.now().toString(), // Simple ID generation for demo
      type,
      content: `New ${type.toLowerCase()} event triggered!`,
      status: 'unread' as const, // TypeScript const assertion
      timeAgo: 'just now',
      sourceUserId: 'demo_user'
    };
    
    // Update the notifications state by adding new notification to the beginning
    setNotifications(prev => [newNotification, ...prev]);
    // Increment unread count for badge display
    setUnreadCount(prev => prev + 1);
  };

  return (
    <div className="min-h-screen bg-background relative overflow-hidden">
      {/* Animated background with gradients and floating elements */}
      <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-background to-accent/5" />
      {/* Floating animated background elements for visual appeal */}
      <div className="absolute top-20 left-20 w-72 h-72 bg-primary/10 rounded-full blur-3xl animate-pulse" />
      <div className="absolute bottom-20 right-20 w-96 h-96 bg-accent/10 rounded-full blur-3xl animate-pulse delay-1000" />
      
      {/* Main content area with z-index to appear above background */}
      <div className="relative z-10 p-6">
        <div className="max-w-5xl mx-auto space-y-8">
          {/* Hero Header Section */}
          {/* Enhanced branding and title section with gradients and animations */}
          <div className="text-center space-y-6">
            {/* Brand badge with animated icons */}
            <div className="inline-flex items-center gap-3 px-6 py-3 bg-gradient-to-r from-primary to-primary-glow rounded-full text-primary-foreground font-bold shadow-lg">
              <Sparkles className="w-6 h-6 animate-pulse" />
              Insyd Connect - Social Architecture Platform
              <Sparkles className="w-6 h-6 animate-pulse" />
            </div>
            {/* Main headline with gradient text effect */}
            <h1 className="text-5xl md:text-6xl font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent leading-tight">
              Smart Notifications
            </h1>
            {/* Subtitle */}
            <h2 className="text-2xl md:text-3xl font-semibold text-foreground/80">
              Real-time Architecture Community Hub
            </h2>
            {/* Description with feature highlights */}
            <p className="text-lg text-muted-foreground max-w-2xl mx-auto leading-relaxed">
              Experience instant notifications with interactive sound feedback. Connect, collaborate, and stay updated with the global architecture community.
            </p>
          </div>

          {/* Main Content Grid - Two Column Layout */}
          <div className="grid gap-8 lg:grid-cols-2">
            
            {/* Left Column: Interactive Action Triggers */}
            <Card className="bg-gradient-to-br from-card/80 to-secondary/20 backdrop-blur-sm border-primary/30 shadow-xl hover:shadow-2xl transition-all duration-300">
              <CardHeader className="pb-4">
                <CardTitle className="flex items-center gap-3 text-xl">
                  {/* Icon container with background */}
                  <div className="p-2 bg-primary/20 rounded-lg">
                    <Users className="w-6 h-6 text-primary" />
                  </div>
                  Interactive Actions
                  {/* Sound indicator badge */}
                  <Badge variant="secondary" className="ml-auto bg-primary/10 text-primary border-primary/20">
                    ðŸ”Š Sound ON
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Action buttons with individual styling and hover effects */}
                {[
                  { type: 'LIKE', color: 'text-red-500', bg: 'hover:bg-red-500/10', border: 'hover:border-red-500/30' },
                  { type: 'FOLLOW', color: 'text-blue-500', bg: 'hover:bg-blue-500/10', border: 'hover:border-blue-500/30' },
                  { type: 'COMMENT', color: 'text-green-500', bg: 'hover:bg-green-500/10', border: 'hover:border-green-500/30' },
                  { type: 'SHARE', color: 'text-purple-500', bg: 'hover:bg-purple-500/10', border: 'hover:border-purple-500/30' }
                ].map(({ type, color, bg, border }) => (
                  <Button
                    key={type}
                    onClick={() => triggerEvent(type)}
                    variant="outline"
                    className={`w-full justify-start gap-3 h-14 border-2 border-border/50 ${bg} ${border} transition-all duration-200 hover:scale-[1.02] active:scale-[0.98]`}
                  >
                    {/* Icon container with colored background */}
                    <div className={`p-2 rounded-lg bg-background/50 ${color}`}>
                      {getIcon(type)}
                    </div>
                    {/* Button text with description */}
                    <div className="text-left">
                      <div className="font-semibold">Simulate {type}</div>
                      <div className="text-xs text-muted-foreground">Click to trigger with sound</div>
                    </div>
                  </Button>
                ))}
              </CardContent>
            </Card>

            {/* Right Column: Live Notifications Display */}
            <Card className="bg-gradient-to-br from-card/80 to-accent/5 backdrop-blur-sm border-accent/30 shadow-xl hover:shadow-2xl transition-all duration-300">
              <CardHeader className="pb-4">
                <CardTitle className="flex items-center justify-between text-xl">
                  <div className="flex items-center gap-3">
                    {/* Animated notification bell icon */}
                    <div className="p-2 bg-accent/20 rounded-lg">
                      <Bell className="w-6 h-6 text-accent animate-pulse" />
                    </div>
                    Live Notifications
                  </div>
                  {/* Unread notification badge with bounce animation */}
                  {unreadCount > 0 && (
                    <Badge variant="secondary" className="bg-primary text-primary-foreground px-3 py-1 animate-bounce">
                      {unreadCount} new
                    </Badge>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 max-h-96 overflow-y-auto">
                {/* Notification list with conditional styling based on read status */}
                {notifications.map(notification => (
                  <div
                    key={notification.notificationId}
                    className={`p-4 rounded-xl border-2 transition-all duration-300 hover:scale-[1.02] ${
                      notification.status === 'unread' 
                        ? 'bg-primary/5 border-primary/30 shadow-lg' // Unread notifications are highlighted
                        : 'bg-muted/30 border-border/30' // Read notifications are muted
                    }`}
                  >
                    <div className="flex items-start gap-4">
                      {/* Notification icon with status-based styling */}
                      <div className={`p-3 rounded-xl transition-all ${
                        notification.status === 'unread' 
                          ? 'bg-primary/20 shadow-md' // Unread notifications have highlighted icons
                          : 'bg-muted/50' // Read notifications have muted icons
                      }`}>
                        {getIcon(notification.type)}
                      </div>
                      {/* Notification content */}
                      <div className="flex-1 min-w-0">
                        <p className="font-semibold text-foreground leading-relaxed">{notification.content}</p>
                        <div className="flex items-center gap-2 mt-2">
                          <p className="text-sm text-muted-foreground">{notification.timeAgo}</p>
                          {/* Unread indicator dot */}
                          {notification.status === 'unread' && (
                            <div className="w-2 h-2 bg-primary rounded-full animate-pulse" />
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                {/* Empty state when no notifications exist */}
                {notifications.length === 0 && (
                  <div className="text-center py-8 text-muted-foreground">
                    <Bell className="w-12 h-12 mx-auto mb-3 opacity-50" />
                    <p>No notifications yet. Try triggering some actions!</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Backend Setup Instructions Card */}
          <Card className="border-warning/30 bg-gradient-to-r from-warning/10 to-info/10 backdrop-blur-sm shadow-lg">
            <CardContent className="pt-6">
              {/* Instructions header */}   
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default Index;
